import streamlit as st
import pandas as pd
import plotly.express as px
from collections import defaultdict
import boto3
import json
from boto3.dynamodb.conditions import Key
import logging
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize DynamoDB client
dynamodb = boto3.resource(
    'dynamodb',
    region_name=os.getenv('AWS_DEFAULT_REGION'),
    aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
    aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY')
)

class ModelAnalytics:
    def __init__(self, table_name):
        self.table = dynamodb.Table(table_name)
        self.metrics = defaultdict(lambda: defaultdict(int))
        self.model_families = {
            "anthropic": ["Claude 3 Sonnet", "Claude 3 Haiku", "Claude 2", "Claude 2.1", "Claude Instant"],
            "amazon": ["Titan Text"],
            "ai21": ["AI21 Jurassic-2 Mid", "AI21 Jurassic-2 Ultra"],
            "cohere": ["Cohere Command", "Cohere Command Light"],
            "meta": ["Meta Llama 2 Chat 13B", "Meta Llama 2 Chat 70B"]
        }

    def update_metrics(self, debate_data):
        try:
            model_a = debate_data.get('model_a', 'Unknown Model A')
            model_b = debate_data.get('model_b', 'Unknown Model B')
            debate_json = json.loads(debate_data.get('debate_data', '{}'))
            judgment = json.loads(debate_data.get('judgment', '{}'))

            # Update debate count
            self.metrics[model_a]['debates_participated'] += 1
            self.metrics[model_b]['debates_participated'] += 1

            # Update wins
            winner = judgment.get('winner')
            if winner == 'Tim':
                self.metrics[model_a]['debates_won'] += 1
            elif winner == 'Tina':
                self.metrics[model_b]['debates_won'] += 1

            # Update tokens generated
            self.metrics[model_a]['tokens_generated'] += sum(len(arg.split()) for arg in debate_json['tim'])
            self.metrics[model_b]['tokens_generated'] += sum(len(arg.split()) for arg in debate_json['tina'])

        except Exception as e:
            logger.error(f"Error processing debate data: {e}")
            logger.error(f"Problematic debate data: {debate_data}")

    def calculate_win_rate(self):
        for model in self.metrics:
            debates = self.metrics[model]['debates_participated']
            wins = self.metrics[model]['debates_won']
            self.metrics[model]['win_rate'] = (wins / debates) * 100 if debates > 0 else 0

    def get_all_debates(self):
        response = self.table.scan()
        debates = response['Items']
        while 'LastEvaluatedKey' in response:
            response = self.table.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
            debates.extend(response['Items'])
        return debates

    def update_all_metrics(self):
        debates = self.get_all_debates()
        for debate in debates:
            self.update_metrics(debate)
        self.calculate_win_rate()

    def display_dashboard(self):
        st.title("Model Analytics Dashboard")

        # Prepare data for charts
        df = pd.DataFrame(self.metrics).T.reset_index()
        df.columns = ['Model', 'Debates Participated', 'Debates Won', 'Tokens Generated', 'Win Rate']

        # Add model family column
        df['Model Family'] = df['Model'].apply(lambda x: next((family for family, models in self.model_families.items() if x in models), "Other"))

        # Bar chart for debates participated and won
        fig1 = px.bar(df, x='Model', y=['Debates Participated', 'Debates Won'], 
                      title="Debates Participated and Won by Model",
                      barmode='group', color='Model Family')
        st.plotly_chart(fig1)

        # Line chart for win rate
        fig2 = px.line(df, x='Model', y='Win Rate', title="Win Rate by Model",
                       markers=True, color='Model Family')
        st.plotly_chart(fig2)

        # Bar chart for tokens generated
        fig3 = px.bar(df, x='Model', y='Tokens Generated', title="Tokens Generated by Model",
                      color='Model Family')
        st.plotly_chart(fig3)

        # Grouped metrics by model family
        st.subheader("Metrics by Model Family")
        family_metrics = df.groupby('Model Family').agg({
            'Debates Participated': 'sum',
            'Debates Won': 'sum',
            'Tokens Generated': 'sum',
            'Win Rate': 'mean'
        }).reset_index()
        st.dataframe(family_metrics)

        # Display raw data
        st.subheader("Raw Data")
        st.dataframe(df)

def run_analytics_dashboard(table_name):
    analytics = ModelAnalytics(table_name)
    analytics.update_all_metrics()
    analytics.display_dashboard()

if __name__ == "__main__":
    run_analytics_dashboard(os.getenv('DYNAMODB_TABLE_NAME'))